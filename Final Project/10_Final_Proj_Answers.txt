// For the final project I'd like for you to do a bit of independent research.
// 1.) In a few sentences: what is @types and why can you sometimes have an error underneath your imported
// package when using Typescript?

1.) @types is the directory within node_modules that stores the type definition files for different packages.
    Sometimes these files are not included in the default package, so they must be downloaded separately.
    Usually, you'll see this error underneath your package name in your import statement. You can of course
    update your type definition files for specific packages using the command 'npm @types package'

// 2.) Take a deeper look at enums here: https://www.typescriptlang.org/docs/handbook/enums.html
// and here: https://medium.com/@Alserda/readable-ts-enum-actiontypes-in-react-redux-c105fa0a7c9b
// and write a sentence or two explaining pros and cons of using enums in section 3.

2.) The pros of using enums for our action types is in the fact that Redux doesn't require a string or explicit
    name for an action type. Thus, we can have an enum take care of the "name" of the action type, and easily
    organize and verify what will be expected of the action. The major con is that if we need to debug an action
    type, say for example in the console, the action name will be a number. This is obviously not very useful in
    determining which action is actually being viewed.


// 3.) Write a sentence on how to find more information about the JSX.Element (used in section 5) in the type
// definition file.

3.) Once annotating something using JSX.Element, you can command click the word 'JSX', to see a closer description
    of the namespace, and which particular classes the element extends.

// 4.) Take a look at Union types: http://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types
// and write a few sentences on the caveats of using unions to describe multiple interfaces (like we did in section 7)

4.) One of the major caveats of using Union types with multiple interfaces is that if we're attempting to use a
    method from either interface A or interface B, the method MUST be attached to both interfaces to be utilized.
    For example, if interface A has the method foo() and bar() and interface B has the method foo() and bas(), we
    can only access the method foo() wherever we've called our union type A | B.

// 5.) What is an alternative to writing 'typeof deleteTodo' in our interface here?
interface AppProps {
    todos: Todo[];
    fetchTodos: Function;
    deleteTodo: typeof deleteTodo;
  }
// Bonus: what does typeof automatically do for us when we use it?

5.) As an alternative, we could write:
interface AppProps {
    todos: Todo[];
    fetchTodos: Function;
    deleteTodo: (id: number) => DeleteTodoAction;
  }
    The reason being, deleteTodo is a function that accepts an id and returns something with the type of DeleteTodoAction.
    If you do decide to annotate this way, you will also have to import the interface for DeleteTodoAction, and
    therefore, every other interface or import you use decide to use this way. As the answer to the Bonus question, typeof
    automatically handles the imports for whatever interface you'd like to use in your interface. When you look at your
    app.tsx file, when using typeof you don't have to import 'DeleteTodoAction', although it is used. If you hover over
    deleteTodo (after typeof) you can see the implied imports. Great for saving time and lines of code but could be better for
    readability and ease of understanding.